package miniJava.ContextualAnalyzer;

import java.io.FileNotFoundException;
import java.util.ArrayList;

import miniJava.ErrorReporter;
import miniJava.AbstractSyntaxTrees.*;
import miniJava.AbstractSyntaxTrees.Package;
import miniJava.SyntacticAnalyzer.*;

public class CAnalyzer implements Visitor<IdentificationTable, Object>{

	IdentificationTable aTable = null;
	ErrorReporter reporter = null;
	private static ArrayList<String> predefDecl;
	static 
	{
		predefDecl = new ArrayList<String>();
		predefDecl.add("class String { }");
		predefDecl.add("class _PrintStream { public void println(int n){} }");
		predefDecl.add("class System { public static _PrintStream out; }");
	}
	
	@Override
	public Type visitPackage(Package prog, IdentificationTable arg) {
		aTable = arg;
		reporter = new ErrorReporter();
		for (String a : predefDecl) {
			Scanner scan;
			try {
				scan = new Scanner(a, reporter);
				Parser parse = new Parser(scan, reporter);
				ClassDecl cd = parse.parseClassDec();
				handleClassDec(cd, aTable);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
		for (ClassDecl cDecl : prog.classDeclList) {
			handleClassDec(cDecl, aTable);
		}
		
		for (ClassDecl cDecl : prog.classDeclList) {
			cDecl.visit(this, aTable);
		}
		
		return null;
	}
	
	@Override
	public Type visitClassDecl(ClassDecl cd, IdentificationTable arg) {
		for (FieldDecl fdecl : cd.fieldDeclList) {
			fdecl.visit(this, cd.idTable);
		}
		
		for (MethodDecl mdecl : cd.methodDeclList) {
			mdecl.visit(this, cd.idTable);
		}
		
		return null;
	}

	@Override
	public Type visitFieldDecl(FieldDecl fd, IdentificationTable arg) {
		fd.type.visit(this, arg);
		
		return null;
	}

	public boolean isMainMethod(MethodDecl newFd) {
		if (!newFd.isPrivate && newFd.isStatic && newFd.type.typeKind == TypeKind.VOID
				&& newFd.name.equals("main")) {
			if (newFd.parameterDeclList.size() == 1) {
				ParameterDecl tmp = newFd.parameterDeclList.get(0);
				if (tmp.type instanceof ArrayType && tmp.name.equals("args")) {
					ArrayType tmpArType = (ArrayType)tmp.type;
					if (tmpArType.eltType instanceof ClassType) {
						ClassType tmpClType = (ClassType)tmpArType.eltType;
						if (tmpClType.className.spelling.equals("String"))
							return true;
					}
				}
			}
			aTable.enter(newFd.name, newFd);
			return true;
		}
		return false;
	}
	
	@Override
	public Type visitMethodDecl(MethodDecl md, IdentificationTable arg) {
		// TODO Auto-generated method stub
		if (!isMainMethod(md)) {
			
		}
		
		for (ParameterDecl pd : md.parameterDeclList) {
			pd.visit(this, arg);
		}
		
		for (Statement st : md.statementList) {
			st.visit(this, arg);
		}
		
		return null;
	}

	@Override
	public Type visitParameterDecl(ParameterDecl pd, IdentificationTable arg) {
		arg.enter(pd.name, pd);
		pd.type.visit(this, arg);
		return null;
	}

	@Override
	public Type visitVarDecl(VarDecl decl, IdentificationTable arg) {
		arg.enter(decl.name, decl);
		decl.type.visit(this, arg);
		return null;
	}

	@Override
	public Type visitBaseType(BaseType type, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type visitClassType(ClassType type, IdentificationTable arg) {
		// TODO Auto-generated method stub
		type.className.visit(this, arg);
		String name = type.className.spelling;
		if (!arg.idTable.contains(name)) {
			// throw error
		}
		return null;
	}

	@Override
	public Type visitArrayType(ArrayType type, IdentificationTable arg) {
		type.eltType.visit(this, arg);
		return null;
	}

	@Override
	public Type visitBlockStmt(BlockStmt stmt, IdentificationTable arg) {
		IdentificationTable tmp = arg;
		tmp.openScope();
		
		for (Statement st : stmt.sl) {
			st.visit(this, arg);
		}
		return null;
	}

	@Override
	public Type visitVardeclStmt(VarDeclStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.varDecl.visit(this, arg);
		stmt.initExp.visit(this, arg);
		return null;
	}

	@Override
	public Type visitAssignStmt(AssignStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.ref.visit(this, arg);
		stmt.val.visit(this, arg);
		return null;
	}

	@Override
	public Type visitCallStmt(CallStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.methodRef.visit(this, arg);
		for (Expression e : stmt.argList) {
			e.visit(this, arg);
		}
		return null;
	}

	@Override
	public Type visitIfStmt(IfStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.cond.visit(this, arg);
		stmt.thenStmt.visit(this, arg);
		stmt.elseStmt.visit(this, arg);
		return null;
	}

	@Override
	public Type visitWhileStmt(WhileStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.cond.visit(this, arg);
		stmt.body.visit(this, arg);
		return null;
	}

	@Override
	public Type visitUnaryExpr(UnaryExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.visit(this, arg);
		return null;
	}

	@Override
	public Type visitBinaryExpr(BinaryExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.left.visit(this, arg);
		expr.operator.visit(this, arg);
		expr.right.visit(this, arg);
	
		return null;
	}

	@Override
	public Type visitRefExpr(RefExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.ref.visit(this, arg);
		return null;
	}

	@Override
	public Type visitCallExpr(CallExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.functionRef.visit(this, arg);
		for (Expression e : expr.argList) {
			e.visit(this, arg);
		}
		return null;
	}

	@Override
	public Type visitLiteralExpr(LiteralExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.lit.visit(this, arg);
		return null;
	}

	@Override
	public Type visitNewObjectExpr(NewObjectExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.classtype.visit(this, arg);
		return null;
	}

	@Override
	public Type visitNewArrayExpr(NewArrayExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.eltType.visit(this, arg);
		expr.sizeExpr.visit(this, arg);
		return null;
	}

	@Override
	public Type visitQualifiedRef(QualifiedRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		ref.ref.visit(this, arg);
		ref.id.visit(this, arg);
		return null;
	}

	@Override
	public Type visitIndexedRef(IndexedRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		ref.ref.visit(this, arg);
		ref.indexExpr.visit(this, arg);
		return null;
	}

	@Override
	public Type visitIdRef(IdRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		ref.id.visit(this, arg);
		return null;
	}

	@Override
	public Type visitThisRef(ThisRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visitIdentifier(Identifier id, IdentificationTable arg) {
		// TODO Auto-generated method stub
		Declaration tmp = arg.retrieve(id.spelling);
		if (tmp != null) {
			id.decl = tmp;
		}
		return tmp;
	}

	@Override
	public Object visitOperator(Operator op, IdentificationTable arg) {
		Declaration binding = arg.retrieve(op.spelling);
	    if (binding != null)
	      op.decl = binding;
	    return binding;
	}

	@Override
	public Type visitIntLiteral(IntLiteral num, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type visitBooleanLiteral(BooleanLiteral bool, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object visitRef(Reference ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	public void handleClassDec(ClassDecl cd, IdentificationTable arg) {
		aTable = arg;
		
		aTable.enter(cd.name, cd);
		cd.idTable = new IdentificationTable();
		cd.idTable.setTable(aTable.idTable);
		
		for(FieldDecl fDecl : cd.fieldDeclList) {
			aTable.enter(fDecl.name, fDecl);
		}
		
		for (MethodDecl mDecl : cd.methodDeclList) {
			aTable.enter(mDecl.name, mDecl);
			mDecl.idTable = new IdentificationTable();
			mDecl.idTable.setTable(aTable.idTable);
		}
	}
}
