package miniJava.SyntacticAnalyzer;

import java.io.*;

import miniJava.ErrorReporter;

public class Scanner{

	private BufferedReader inputStream;
	private ErrorReporter reporter;

	private char currentChar;
	private StringBuilder currentSpelling;

	int line = 1, column = 1;	// Source position
	
	public Scanner(BufferedReader inputStream, ErrorReporter reporter) {
		this.inputStream = inputStream;
		this.reporter = reporter;
		
		// initialize scanner state
		readChar();
	}

	/**
	 * skip whitespace and tabs and scan next token
	 * @return token
	 */
	public Token scan() {

		// skip whitespace
		while (currentChar == ' ' || currentChar == '\t')
			skipIt();

		// collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		
		TokenKind kind = null;
		while (kind == null || kind == TokenKind.NULL) 
			kind = scanToken();

		SourcePosition posn = new SourcePosition(line, column);
		// return new token
		return new Token(kind, currentSpelling.toString(), posn);
	}
	
	public Token scanForWhitespace() {
		currentSpelling = new StringBuilder();
		currentSpelling.append(currentChar);
		if (currentChar == ' ' || currentChar == '\t') {
			SourcePosition posn = new SourcePosition(line, column);
			return new Token(TokenKind.WHITESPACE, currentSpelling.toString(), posn);
		}
		else
			return scan();
	}
	
	public TokenKind scanToken() {
		
		if (currentChar == '{') {
			takeIt();
			return(TokenKind.LBRACE);
		}
		
		else if (currentChar == '\n' || currentChar == '\r' ||
				currentChar == '\t' || currentChar == ' ') {
			if (currentChar == '\n' || currentChar == '\r') {
				line++;
				column = 1;
			}
			nextChar();
			return(TokenKind.NULL);
		}
		
		else if (currentChar == '}') {
			takeIt();
			return(TokenKind.RBRACE);
		}
		
		else if (currentChar == '[') {
			takeIt();
			return(TokenKind.LBRACKET);
		}
		
		else if (currentChar == ']') {
			takeIt();
			return(TokenKind.RBRACKET);
		}
		
		else if (currentChar == '(') {
			takeIt();
			return(TokenKind.LPAREN);
		}
		
		else if (currentChar == ')') {
			takeIt();
			return(TokenKind.RPAREN);
		}
		
		else if (currentChar == ';') {
			takeIt();
			return(TokenKind.SEMICOLON);
		}
		
		else if (currentChar == '+') {
			takeIt();
			return(TokenKind.BINOP);
		}
		
		else if (currentChar == '-') {
			takeIt();
			if (currentChar == '-') {
				scanError("Illegal character in input");
				return(TokenKind.ERROR);
			}
			return(TokenKind.SUBTRACT);
		}
		
		else if (currentChar == '.') {
			takeIt();
			return(TokenKind.PERIOD);
		}
		
		else if (currentChar == ',') {
			takeIt();
			return(TokenKind.COMMA);
		}
		
		else if (currentChar == '!') {
			takeIt();
			if (currentChar == '=') {
				takeIt();
				return(TokenKind.BINOP);
			}
			
			return(TokenKind.UNOP);
		}
		
		else if (currentChar == '=') {
			takeIt();
			if (currentChar == '=') {
				takeIt();
				return(TokenKind.BINOP);
			}
			return(TokenKind.EQUALS);
		}
		
		else if (currentChar == '>') {
			takeIt();
			if (currentChar == '=') {
				takeIt();
			}
			return(TokenKind.BINOP);
		}
		
		else if (currentChar == '<') {
			takeIt();
			if (currentChar == '=') {
				takeIt();
			}
			return(TokenKind.BINOP);
		}
		
		else if (currentChar == '|') {
			takeIt();
			if (currentChar == '|') {
				takeIt();
				return TokenKind.BINOP;
			}
			System.out.println("There is no second |");
		}
		
		else if (currentChar == '&') {
			takeIt();
			if (currentChar == '&') {
				takeIt();
				return TokenKind.BINOP;
			}
			
			System.out.println("There is no second &");
		}
		
		else if (currentChar == '>') {
			takeIt();
			return(TokenKind.BINOP);
		}
		
		else if (currentChar == '<') {
			takeIt();
			return(TokenKind.BINOP);
		}
		
		else if (currentChar == '/') {
			takeIt();
			if (currentChar == '/') {
				takeIt();
				scanUntilNewline();
				return(TokenKind.NULL);
			}
			
			else if (currentChar == '*') {
				takeIt();
				scanUntilCloseBlockComment();
				return(TokenKind.NULL);
			}
			
			else {
				return(TokenKind.BINOP);
			}
		}
		
		else if (currentChar == '*') {
			takeIt();
			if (currentChar == '/') {
				takeIt();
				return(TokenKind.BLOCK_COMMENT_CLOSE);
			}
			
			else {
				return TokenKind.BINOP;
			}
		}
		
		else if (Character.toString(currentChar).matches("[0-9]")) {
			while (Character.toString(currentChar).matches("[0-9]")) {
				takeIt();
			}
			return(TokenKind.NUM);
		}
		
		else if (Character.toString(currentChar).matches("^[a-zA-Z]")) {
			while (Character.toString(currentChar).matches("^[a-zA-Z0-9_]")) {
				takeIt();
			}
			
			if (currentSpelling.toString().equals("class")) {
				return TokenKind.CLASS_KW;
			}
			
			else if (currentSpelling.toString().equals("public")) {
				return TokenKind.PUBLIC_KW;
			}
			
			else if (currentSpelling.toString().equals("private")) {
				return TokenKind.PRIVATE_KW;
			}
			
			else if (currentSpelling.toString().equals("static")) {
				return TokenKind.STATIC_KW;
			}
			
			else if (currentSpelling.toString().equals("void")) {
				return TokenKind.VOID_KW;
			}
			
			else if (currentSpelling.toString().equals("return")) {
				return TokenKind.RETURN_KW;
			}
			
			else if (currentSpelling.toString().equals("this")) {
				return TokenKind.THIS_KW;
			}
			
			else if (currentSpelling.toString().equals("if")) {
				return TokenKind.IF_KW;
			}
			
			else if (currentSpelling.toString().equals("else")) {
				return TokenKind.ELSE_KW;
			}
			
			else if (currentSpelling.toString().equals("while")) {
				return TokenKind.WHILE_KW;
			}
			
			else if (currentSpelling.toString().equals("new")) {
				return TokenKind.NEW_KW;
			}
			
			else if (currentSpelling.toString().equals("true")) {
				return TokenKind.TRUE_KW;
			}
			
			else if (currentSpelling.toString().equals("false")) {
				return TokenKind.FALSE_KW;
			}
			
			else if (currentSpelling.toString().equals("boolean")) {
				return TokenKind.BOOLEAN_KW;
			}
			
			else if (currentSpelling.toString().equals("int")) {
				return TokenKind.INT_KW;
			}

			return TokenKind.ID;
		}
		
		else if (currentChar == '\u0003')
		{
			return(TokenKind.EOT);
		}
		
		else
		{
			System.out.println();
			nextChar();
			return(TokenKind.ERROR);
		}
		
		return(TokenKind.ERROR);
	}

	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}

	private void skipIt() {
		nextChar();
	}

	private boolean isDigit(char c) {
		return (c >= '0') && (c <= '9');
	}

	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}

	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of line or end of file and substitute '\u0003' as distinguished eot terminal
	 */
	private void nextChar() {
		if (currentChar != '\u0003')
			readChar();
	}

	private char readChar() {
		try {
			int c = inputStream.read();
			
			if (c == -1)
				currentChar = '\u0003';
			else {
				currentChar = (char) c;
				column++;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			currentChar = '\u0003';
		}
		return currentChar;
	}
	
	// Looks ahead in input stream and resets
	public Token lookAhead(int numBytes) throws IOException {
		inputStream.mark(16);
		char tmp1 = currentChar;
		int i = 0;
		Token tmp = null;
		while (i < numBytes) {
			tmp = scan();
			i++;
		}
		currentChar = tmp1;
		inputStream.reset();
		return tmp;
	}
	
	// Handle Line Comments
	private void scanUntilNewline() {
		while (currentChar != '\n' && currentChar != '\r' && 
				currentChar != '\u0003')
			skipIt();

		if (currentChar == '\n' || currentChar == '\r') {
			skipIt();
			currentSpelling = new StringBuilder();
			line += 1;
			column = 1;
			return;
		}
	}
	
	// Handle Block Comments
	private void scanUntilCloseBlockComment() {
		while (currentChar != '\u0003') {
			if (currentChar == '*') {
				skipIt();
				if (currentChar == '/') {
					skipIt();
					currentSpelling = new StringBuilder();
					return;
				}
			}
			else
				skipIt();
		}
		
		scanError("Did not find a closing block comment");
	}
}

