package miniJava.ContextualAnalyzer;

import miniJava.AbstractSyntaxTrees.*;
import miniJava.AbstractSyntaxTrees.Package;

public class CAnalyzer implements Visitor<IdentificationTable, Object>{

	IdentificationTable aTable = null;
	@Override
	public Type visitPackage(Package prog, IdentificationTable arg) {
		aTable = arg;
		
		for (ClassDecl cDecl : prog.classDeclList) {
			aTable.enter(cDecl.name, cDecl);
			cDecl.idTable = new IdentificationTable();
			cDecl.idTable.setTable(aTable.idTable);
			
			for(FieldDecl fDecl : cDecl.fieldDeclList) {
				aTable.enter(fDecl.name, fDecl);
			}
			
			for (MethodDecl mDecl : cDecl.methodDeclList) {
				aTable.enter(mDecl.name, mDecl);
				mDecl.idTable = new IdentificationTable();
				mDecl.idTable.setTable(aTable.idTable);
			}
		}
		
		for (ClassDecl cDecl : prog.classDeclList) {
			cDecl.visit(this, aTable);
		}
		
		return null;
	}

	@Override
	public Type visitClassDecl(ClassDecl cd, IdentificationTable arg) {
		IdentificationTable tmp = arg;
		
		return null;
	}

	@Override
	public Type visitFieldDecl(FieldDecl fd, IdentificationTable arg) {
		IdentificationTable tmp = arg;
		
		return null;
	}

	public boolean isMainMethod(MethodDecl newFd) {
		if (!newFd.isPrivate && newFd.isStatic && newFd.mt.typeKind == TypeKind.VOID
				&& newFd.name.equals("main")) {
			if (newFd.parameterDeclList.size() == 1) {
				ParameterDecl tmp = newFd.parameterDeclList.get(0);
				if (tmp.type instanceof ArrayType) {
					
				}
			}
			aTable.enter(newFd.name, newFd);
			return true;
		}
		return false;
	}
	
	@Override
	public Type visitMethodDecl(MethodDecl md, IdentificationTable arg) {
		// TODO Auto-generated method stub
		if (!isMainMethod(md)) {
			
		}
		
		for (ParameterDecl pd : md.parameterDeclList) {
			pd.visit(this, arg);
		}
		
		for (Statement st : md.statementList) {
			st.visit(this, arg);
		}
		
		return null;
	}

	@Override
	public Type visitParameterDecl(ParameterDecl pd, IdentificationTable arg) {
		arg.enter(pd.name, pd);
		pd.type.visit(this, arg);
		return null;
	}

	@Override
	public Type visitVarDecl(VarDecl decl, IdentificationTable arg) {
		arg.enter(decl.name, decl);
		decl.type.visit(this, arg);
		return null;
	}

	@Override
	public Type visitBaseType(BaseType type, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type visitClassType(ClassType type, IdentificationTable arg) {
		// TODO Auto-generated method stub
		type.className.visit(this, arg);
		String name = type.className.spelling;
		if (!arg.idTable.contains(name)) {
			// throw error
		}
		return null;
	}

	@Override
	public Type visitArrayType(ArrayType type, IdentificationTable arg) {
		type.eltType.visit(this, arg);
		return null;
	}

	@Override
	public Type visitBlockStmt(BlockStmt stmt, IdentificationTable arg) {
		IdentificationTable tmp = arg;
		tmp.openScope();
		
		for (Statement st : stmt.sl) {
			st.visit(this, arg);
		}
		return null;
	}

	@Override
	public Type visitVardeclStmt(VarDeclStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.varDecl.visit(this, arg);
		stmt.initExp.visit(this, arg);
		return null;
	}

	@Override
	public Type visitAssignStmt(AssignStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.ref.visit(this, arg);
		stmt.val.visit(this, arg);
		return null;
	}

	@Override
	public Type visitCallStmt(CallStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.methodRef.visit(this, arg);
		for (Expression e : stmt.argList) {
			e.visit(this, arg);
		}
		return null;
	}

	@Override
	public Type visitIfStmt(IfStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.cond.visit(this, arg);
		stmt.thenStmt.visit(this, arg);
		stmt.elseStmt.visit(this, arg);
		return null;
	}

	@Override
	public Type visitWhileStmt(WhileStmt stmt, IdentificationTable arg) {
		// TODO Auto-generated method stub
		stmt.cond.visit(this, arg);
		stmt.body.visit(this, arg);
		return null;
	}

	@Override
	public Type visitUnaryExpr(UnaryExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.visit(this, arg);
		return null;
	}

	@Override
	public Type visitBinaryExpr(BinaryExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.left.visit(this, arg);
		expr.operator.visit(this, arg);
		expr.right.visit(this, arg);
	
		return null;
	}

	@Override
	public Type visitRefExpr(RefExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.ref.visit(this, arg);
		return null;
	}

	@Override
	public Type visitCallExpr(CallExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.functionRef.visit(this, arg);
		for (Expression e : expr.argList) {
			e.visit(this, arg);
		}
		return null;
	}

	@Override
	public Type visitLiteralExpr(LiteralExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.lit.visit(this, arg);
		return null;
	}

	@Override
	public Type visitNewObjectExpr(NewObjectExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.classtype.visit(this, arg);
		return null;
	}

	@Override
	public Type visitNewArrayExpr(NewArrayExpr expr, IdentificationTable arg) {
		// TODO Auto-generated method stub
		expr.eltType.visit(this, arg);
		expr.sizeExpr.visit(this, arg);
		return null;
	}

	@Override
	public Type visitQualifiedRef(QualifiedRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		ref.ref.visit(this, arg);
		ref.id.visit(this, arg);
		return null;
	}

	@Override
	public Type visitIndexedRef(IndexedRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		ref.ref.visit(this, arg);
		ref.indexExpr.visit(this, arg);
		return null;
	}

	@Override
	public Type visitIdRef(IdRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		ref.id.visit(this, arg);
		return null;
	}

	@Override
	public Type visitThisRef(ThisRef ref, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type visitIdentifier(Identifier id, IdentificationTable arg) {
		// TODO Auto-generated method stub
		id.decl = arg.retrieve(id.spelling);
		return null;
	}

	@Override
	public Type visitOperator(Operator op, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type visitIntLiteral(IntLiteral num, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type visitBooleanLiteral(BooleanLiteral bool, IdentificationTable arg) {
		// TODO Auto-generated method stub
		return null;
	}

}
